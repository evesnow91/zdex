scilla_version 0

library LiquidityManager

let one = Uint128 1
let zero = Uint128 0

let no_trans = Uint128 0
let add_liquidity_trans = Uint128 1
let remove_liquidity_trans = Uint128 2

let any_zero_double =
    fun (first : Uint128) =>
    fun (second : Uint128) =>
        let f_zero = builtin eq first zero in
        let s_zero = builtin eq second zero in
        orb f_zero s_zero

let any_zero_triple =
    fun (first : Uint128) =>
    fun (second : Uint128) =>
    fun (third : Uint128) =>
        let fs_zero = any_zero_double first second in
        let t_zero = builtin eq third zero in
        orb fs_zero t_zero

let ble =
    fun (b1 : BNum ) =>
    fun (b2 : BNum ) =>
        let b1_lt = builtin blt b1 b2 in
        let b_eq = builtin eq b1 b2 in
        orb b1_lt b_eq

contract LiquidityManager
(hub : ByStr20)

transition AddLiquidity (token : ByStr20, min_liquidity : Uint128,
        max_tokens : Uint128, deadline : BNum)
    (* payable *)
    (* Calls AddLiquidityNonzero(), AddLiquidityZero() *)
    (* returns Uint128 *)
    blocknumber <- & BLOCKNUMBER;
    block_valid = ble blocknumber deadline;
    match block_valid with
    |   True =>
        any_param_zero = any_zero_double max_tokens _amount;
        match any_param_zero with
        |   False =>
            total_liquidity <- token_total_supplies[token];
            match total_liquidity with
            |   Some t_l =>
                accept;
                zero_liquidity = builtin eq t_l zero;
                match zero_liquidity with
                |   False =>
                    msg = { _tag : "AddLiquidityNonzero"; _recipient : _this_address; _amount : zero;
                            token : token; min_liquidity : min_liquidity; max_tokens : max_tokens;
                            deadline : deadline; total_liquidity : t_l; sender : _sender;
                            zil_sold : _amount };
                    msgs = one_msg msg;
                    send msgs
                |   True =>
                    msg = { _tag : "AddLiquidityZero"; _recipient : _this_address; _amount : zero;
                            token : token; min_liquidity : min_liquidity; max_tokens : max_tokens;
                            deadline : deadline; total_liquidity : t_l; sender : _sender;
                            zil_sold : _amount };
                    msgs = one_msg msg;
                    send msgs
                end
            |   None =>
                msg = { _tag : "AddLiquidityFailure"; _recipient : _sender; _amount : zero;
                        code : token_not_found_code };
                msgs = one_msg msg;
                send msgs
            end
        |   True =>
            msg = { _tag : "AddLiquidityFailure"; _recipient : _sender; _amount : zero;
                    code : parameter_is_zero_code };
            msgs = one_msg msg;
            send msgs
        end
    |   False =>
        msg = { _tag : "AddLiquidityFailure"; _recipient : _sender; _amount : zero;
                token : token; min_liquidity : min_liquidity;
                max_tokens : max_tokens; deadline : deadline;
                code : order_expired_code};
        msgs = one_msg msg;
        send msgs
    end
end

transition AddLiquidityNonzero (token : ByStr20, min_liquidity : Uint128,
        max_tokens : Uint128, deadline : BNum, total_liquidity : Uint128,
        sender : ByStr20, zil_sold : Uint128)
    (* private *)
    (* Modifies fields token_total_supplies, token_balances *)
    (* calls FungibleToken.TransferFrom() *)
    (* sends funds *)
    (* Nonzero liquidity case of AddLiquidity *)
    is_this_address = builtin eq _sender _this_address;
    match is_this_address with
    |   True =>
        min_liq_zero = builtin eq min_liquidity zero;
        match min_liq_zero with
        |   False =>
            token_reserve <- token_reserves[token];
            match token_reserve with
            |   Some t_r =>
                bal <- _balance;
                zil_reserve = builtin sub bal zil_sold;
                amount_t_r = builtin mul zil_sold t_r;
                amount_tr_zr = builtin div amount_t_r zil_reserve;
                token_amount = builtin add amount_tr_zr one;
                amount_t_l = builtin mul zil_sold total_liquidity;
                liquidity_minted = builtin div amount_t_l zil_reserve;
                enough_tokens = le_int token_amount max_tokens;
                enough_liquidity = le_int min_liquidity liquidity_minted;
                order_met = andb enough_tokens enough_liquidity;
                match order_met with
                |   True =>
                    totalSupply_new = builtin add total_liquidity liquidity_minted;
                    option_tS_new = Some {Uint128} totalSupply_new;
                    t_tS_pending := option_tS_new;
                    sender_balance <- token_balances[token][sender];
                    match sender_balance with
                    |   Some s_b =>
                        s_b_new = builtin add s_b liquidity_minted;
                        option_s_b_new = Some {Uint128} s_b_new;
                        t_b_pending := option_s_b_new;
                        msg = { _tag : "TransferFrom"; _recipient : token; _amount : zero;
                                from : sender; to : _this_address; tokens : token_amount};
                        msgs = one_msg msg;
                        send msgs
                    |   None =>
                        option_liquidity_minted = Some {Uint128} liquidity_minted;
                        t_b_pending := option_liquidity_minted;
                        msg = { _tag : "TransferFrom"; _recipient : token; _amount : zero;
                                from : sender; to : _this_address; tokens : token_amount};
                        msgs = one_msg msg;
                        send msgs
                    end
                |   False =>
                    msg = { _tag : "AddLiquidityNonzeroFailure"; _recipient : sender; _amount : zil_sold;
                            code : token_not_found_code };
                    msgs = one_msg msg;
                    send msgs
                end
            |   None =>
                msg = { _tag : "AddLiquidityNonzeroFailure"; _recipient : sender; _amount : zil_sold;
                        code : order_not_met_code };
                msgs = one_msg msg;
                send msgs
            end
        |   True =>
            msg = { _tag : "AddLiquidityNonzeroFailure"; _recipient : sender; _amount : zil_sold;
                    code : parameter_is_zero_code };
            msgs = one_msg msg;
            send msgs
        end
    |   False =>
        msg = { _tag : "AddLiquidityNonzeroFailure"; _recipient : sender; _amount : zil_sold;
                code : private_function_called_code };
        msgs = one_msg msg;
        send msgs
    end
end

transition AddLiquidityZero (token : ByStr20, min_liquidity : Uint128,
        max_tokens : Uint128, deadline : BNum, total_liquidity : Uint128,
        sender : ByStr20, zil_sold : Uint128)
    (* private *)
    (* Modifies fields token_total_supplies, token_balances *)
    (* calls FungibleToken.TransferFrom() *)
    (* sends funds *)
    (* Zero liquidity case of AddLiquidity *)
    is_this_address = builtin eq _sender _this_address;
    match is_this_address with
    |   True =>
        enough_sold = le_int ten_e_six zil_sold;
        match enough_sold with
        |   True =>
            option_zil_sold = Some {Uint128} zil_sold;
            t_tS_pending := option_zil_sold;
            t_b_pending := option_zil_sold;
            msg = { _tag : "TransferFrom"; _recipient : token; _amount : zero;
                    from : sender; to : _this_address; tokens : max_tokens };
            msgs = one_msg msg;
            send msgs
        |   False =>
            msg = { _tag : "AddLiquidityZeroFailure"; _recipient : sender; _amount : zil_sold;
                    code : order_not_met_code };
            msgs = one_msg msg;
            send msgs
        end
    |   False =>
        msg = { _tag : "AddLiquidityZeroFailure"; _recipient : sender; _amount : zil_sold;
                code : private_function_called_code };
        msgs = one_msg msg;
        send msgs
    end
end

transition RemoveLiquidity (token : ByStr20, amount : Uint128, min_zil : Uint128,
        min_tokens : Uint128, deadline : BNum, recipient : ByStr20)
    (* Modifies fields token_total_supplies, token_balances, tx_pending_debt *)
    (* returns Uint128 *)
    (* calls FungibleToken.Transfer() *)
    any_param_zero = any_zero_triple amount min_zil min_tokens;
    match any_param_zero with
    |   False =>
        blocknumber <- & BLOCKNUMBER;
        block_valid = ble blocknumber deadline;
        match block_valid with
        |   True =>
            total_liquidity <- token_total_supplies[token];
            match total_liquidity with
            |   Some t_l =>
                t_l_zero = builtin eq t_l zero;
                match t_l_zero with
                |   False =>
                    token_reserve <- token_reserves[token];
                    match token_reserve with
                    |   Some t_r =>
                        bal <- _balance;
                        amount_bal = builtin mul amount bal;
                        zil_amount = builtin div amount_bal t_l;
                        amount_t_r = builtin mul amount t_r;
                        token_amount = builtin div amount_t_r t_l;
                        enough_zil = le_int min_zil zil_amount;
                        enough_tokens = le_int min_tokens token_amount;
                        order_met = andb enough_tokens enough_zil;
                        match order_met with
                        |   True =>
                            token_balance <- token_balances[token][_sender];
                            match token_balance with
                            |   Some t_b =>
                                t_b_new = builtin sub t_b amount;
                                token_balances[token][_sender] := t_b_new;
                                t_l_new = builtin sub t_l amount;
                                token_total_supplies[token] := t_l_new;
                                tx_pending_debt := zil_amount;
                                msg = { _tag : "Transfer"; _recipient : token; _amount : zero;
                                        to : recipient; tokens : token_amount};
                                msgs = one_msg msg;
                                send msgs
                            |   None =>
                                msg = { _tag : "RemoveLiquidityFailure"; _recipient : _sender; _amount : zero;
                                        code : parameter_is_zero_code };
                                msgs = one_msg msg;
                                send msgs
                            end
                        |   False =>
                            msg = { _tag : "RemoveLiquidityFailure"; _recipient : _sender; _amount : zero;
                                    code : order_not_met_code };
                            msgs = one_msg msg;
                            send msgs
                        end
                    |   None =>
                        msg = { _tag : "RemoveLiquidityFailure"; _recipient : _sender; _amount : zero;
                                code : token_not_found_code };
                        msgs = one_msg msg;
                        send msgs
                    end
                |   True =>
                    msg = { _tag : "RemoveLiquidityFailure"; _recipient : _sender; _amount : zero;
                            code : parameter_is_zero_code };
                    msgs = one_msg msg;
                    send msgs
                end
            |   None =>
                msg = { _tag : "RemoveLiquidityFailure"; _recipient : _sender; _amount : zero;
                        code : token_not_found_code };
                msgs = one_msg msg;
                send msgs
            end
        |   False =>
            msg = { _tag : "RemoveLiquidityFailure"; _recipient : _sender; _amount : zero;
                    code : order_expired_code };
            msgs = one_msg msg;
            send msgs
        end
    |   True =>
        msg = { _tag : "RemoveLiquidityFailure"; _recipient : _sender; _amount : zero;
                code : parameter_is_zero_code };
        msgs = one_msg msg;
        send msgs
    end
end
